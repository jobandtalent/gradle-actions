diff --git a/node_modules/@actions/cache/lib/cache.d.ts b/node_modules/@actions/cache/lib/cache.d.ts
index bbc0d60..02b239c 100644
--- a/node_modules/@actions/cache/lib/cache.d.ts
+++ b/node_modules/@actions/cache/lib/cache.d.ts
@@ -24,7 +24,7 @@ export declare function isFeatureAvailable(): boolean;
  * @param s3BucketName a name of AWS S3 bucket
  * @returns string returns the key for the cache hit, otherwise returns undefined
  */
-export declare function restoreCache(paths: string[], primaryKey: string, restoreKeys?: string[], options?: DownloadOptions, enableCrossOsArchive?: boolean, s3Options?: S3ClientConfig, s3BucketName?: string): Promise<string | undefined>;
+export declare function restoreCache(paths: string[], primaryKey: string, restoreKeys?: string[], options?: DownloadOptions, enableCrossOsArchive?: boolean, s3Options?: S3ClientConfig, s3BucketName?: string): Promise<CacheEntry | undefined>;
 /**
  * Saves a list of files with the specified key
  *
@@ -36,4 +36,11 @@ export declare function restoreCache(paths: string[], primaryKey: string, restor
  * @param s3BucketName a name of AWS S3 bucket
  * @returns number returns cacheId if the cache was saved successfully and throws an error if save fails
  */
-export declare function saveCache(paths: string[], key: string, options?: UploadOptions, enableCrossOsArchive?: boolean, s3Options?: S3ClientConfig, s3BucketName?: string): Promise<number>;
+export declare function saveCache(paths: string[], key: string, options?: UploadOptions, enableCrossOsArchive?: boolean, s3Options?: S3ClientConfig, s3BucketName?: string): Promise<CacheEntry>;
+
+export declare class CacheEntry {
+    key: string
+    size?: number
+
+    constructor(key: string, size?: number);
+}
diff --git a/node_modules/@actions/cache/lib/cache.js b/node_modules/@actions/cache/lib/cache.js
index 7229b6e..397abf9 100644
--- a/node_modules/@actions/cache/lib/cache.js
+++ b/node_modules/@actions/cache/lib/cache.js
@@ -129,16 +129,18 @@ function restoreCache(paths, primaryKey, restoreKeys, options, enableCrossOsArch
             core.info(`Cache Size: ~${Math.round(archiveFileSize / (1024 * 1024))} MB (${archiveFileSize} B)`);
             yield (0, tar_1.extractTar)(archivePath, compressionMethod);
             core.info('Cache restored successfully');
-            return cacheEntry.cacheKey;
+            // PATCHED - Return more inforamtion about restored entry
+            return new CacheEntry(cacheEntry.cacheKey, archiveFileSize)
+            
         }
+        // PATCHED - propagate errors
         catch (error) {
-            const typedError = error;
+            const typedError = error
             if (typedError.name === ValidationError.name) {
-                throw error;
-            }
-            else {
+                throw error
+            } else {
                 // Supress all non-validation cache related errors because caching should be optional
-                core.warning(`Failed to restore: ${error.message}`);
+                core.warning(`Failed to restore: ${error.message}`)
             }
         }
         finally {
@@ -212,7 +214,11 @@ function saveCache(paths, key, options, enableCrossOsArchive = false, s3Options,
             }
             core.debug(`Saving Cache (ID: ${cacheId})`);
             yield cacheHttpClient.saveCache(cacheId, archivePath, key, options, s3Options, s3BucketName);
+            
+            // PATCHED - Return more inforamtion about saved entry
+            return new CacheEntry(key, archiveFileSize);
         }
+        // PATCHED - propagate errors
         catch (error) {
             const typedError = error;
             if (typedError.name === ValidationError.name) {
@@ -238,4 +244,11 @@ function saveCache(paths, key, options, enableCrossOsArchive = false, s3Options,
     });
 }
 exports.saveCache = saveCache;
+class CacheEntry {
+    constructor(key, size) {
+        this.key = key;
+        this.size = size;
+    }
+}
+exports.CacheEntry = CacheEntry;
 //# sourceMappingURL=cache.js.map
\ No newline at end of file
